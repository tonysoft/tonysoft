/* Inner.svelte generated by Svelte v3.12.1 */
import {
	SvelteElement,
	append,
	attr,
	detach,
	binding_callbacks,
	element,
	flush,
	init,
	insert,
	listen,
	noop,
	safe_not_equal,
	set_data,
	space,
	text
} from "./svelte/internal.js";
import { createEventDispatcher, onMount } from "./svelte/svelte.js";
import "https://unpkg.com/jsoneditor@7.0.3/dist/jsoneditor.js"

function create_fragment(ctx) {
	var link, t, div;

	return {
		c() {
			link = element("link");
			t = space();
			div = element("div");
			this.c = noop;
			attr(link, "href", "https://unpkg.com/jsoneditor@7.0.3/dist/jsoneditor.css");
			attr(link, "rel", "stylesheet");
			attr(link, "type", "text/css");
			attr(div, "class", "editor");
		},

		m(target, anchor) {
			insert(target, link, anchor);
			insert(target, t, anchor);
			insert(target, div, anchor);
			ctx.div_binding(div);
		},

		p: noop,
		i: noop,
		o: noop,

		d(detaching) {
			if (detaching) {
				detach(link);
				detach(t);
				detach(div);
			}

			ctx.div_binding(null);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	

    let options;
	let container;

	let { width = null, height = null, editor, json = {} } = $$props;

    function getJSON() {
        if (editor) {
            editorEvent("json", editor.get());
        }
    }
 
	let { getjson = false } = $$props;

	const dispatch = createEventDispatcher();
	let { mode = 'tree' } = $$props;
	onMount(() => {
        setTimeout(function() {
            createEditor();
        });

		return () => {
			// map.remove();
		};
	});
	function editorEvent(eventName, payload) {
        dispatch(eventName, payload);
	}

    function createEditor() {
        options = { 
            mode: mode,
            onEvent: function(node, event) {
                if (event.type === 'click') {
                    editorEvent("node", node);
                    if (node.value) {
                        editorEvent("nodeValue", node.value);
                    }
                }
            }
        };
        if (width) {
            var widthStyle = width;
            if (!isNaN(widthStyle)) {
                widthStyle += "px";
            }
            $$invalidate('container', container.style.width = widthStyle, container);
        }
        if (height) {
            var heightStyle = height;
            if (!isNaN(heightStyle)) {
                heightStyle += "px";
            }
            $$invalidate('container', container.style.height = heightStyle, container);
        }
        $$invalidate('editor', editor = new JSONEditor(container, options));
        setJSON();
    }
    function setJSON() {
        if (json.split) {
            $$invalidate('json', json = JSON.parse(json));
        }
        editor.set(json);
    }

	function div_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			$$invalidate('container', container = $$value);
		});
	}

	$$self.$set = $$props => {
		if ('width' in $$props) $$invalidate('width', width = $$props.width);
		if ('height' in $$props) $$invalidate('height', height = $$props.height);
		if ('editor' in $$props) $$invalidate('editor', editor = $$props.editor);
		if ('json' in $$props) $$invalidate('json', json = $$props.json);
		if ('getjson' in $$props) $$invalidate('getjson', getjson = $$props.getjson);
		if ('mode' in $$props) $$invalidate('mode', mode = $$props.mode);
	};

	$$self.$$.update = ($$dirty = { getjson: 1, json: 1, editor: 1 }) => {
		if ($$dirty.getjson) { if (getjson && (getjson !== "false")) {
                getJSON();
        	} }
		if ($$dirty.json || $$dirty.editor) { if (json && editor) {
                setJSON();
        	} }
	};

	return {
		container,
		width,
		height,
		editor,
		json,
		getJSON,
		getjson,
		mode,
		div_binding
	};
}

class Inner extends SvelteElement {
	constructor(options) {
		super();

		this.shadowRoot.innerHTML = `<style>.editor{width:100%;height:100%}</style>`;

		init(this, { target: this.shadowRoot }, instance, create_fragment, safe_not_equal, ["width", "height", "editor", "json", "getJSON", "getjson", "mode"]);

		if (options) {
			if (options.target) {
				insert(options.target, this, options.anchor);
			}

			if (options.props) {
				this.$set(options.props);
				flush();
			}
		}
	}

	static get observedAttributes() {
		return ["width","height","editor","json","getJSON","getjson","mode"];
	}

	get width() {
		return this.$$.ctx.width;
	}

	set width(width) {
		this.$set({ width });
		flush();
	}

	get height() {
		return this.$$.ctx.height;
	}

	set height(height) {
		this.$set({ height });
		flush();
	}

	get editor() {
		return this.$$.ctx.editor;
	}

	set editor(editor) {
		this.$set({ editor });
		flush();
	}

	get json() {
		return this.$$.ctx.json;
	}

	set json(json) {
		this.$set({ json });
		flush();
	}

	get getJSON() {
		return this.$$.ctx.getJSON;
	}

	get getjson() {
		return this.$$.ctx.getjson;
	}

	set getjson(getjson) {
		this.$set({ getjson });
		flush();
	}

	get mode() {
		return this.$$.ctx.mode;
	}

	set mode(mode) {
		this.$set({ mode });
		flush();
	}
}

export default Inner;
window.customElements.define('json-svelte', Inner);

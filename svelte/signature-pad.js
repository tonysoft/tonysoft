/* Inner.svelte generated by Svelte v3.12.1 */
import {
	SvelteElement,
	append,
	attr,
	binding_callbacks,
	detach,
	element,
	flush,
    init,
	insert,
	listen,
	noop,
	run_all,
	safe_not_equal,
	set_style,
	space
} from "./svelte/internal.js";
import { createEventDispatcher, onMount } from "./svelte/svelte.js";
import { SignaturePad } from "./js/signature_pad.js"

function create_fragment(ctx) {
	var div5, div0, canvas_1, t0, div4, div3, div1, button0, t2, button1, t4, div2, button2, t6, button3, dispose;

	return {
		c() {
			div5 = element("div");
			div0 = element("div");
			canvas_1 = element("canvas");
			t0 = space();
			div4 = element("div");
			div3 = element("div");
			div1 = element("div");
			button0 = element("button");
			button0.textContent = "Clear";
			t2 = space();
			button1 = element("button");
			button1.textContent = "Undo";
			t4 = space();
			div2 = element("div");
			button2 = element("button");
			button2.textContent = "Save as PNG";
			t6 = space();
			button3 = element("button");
			button3.textContent = "Save as SVG";
			this.c = noop;
			attr(div0, "class", "signature-pad--body");
			attr(button0, "type", "button");
			attr(button0, "class", "button clear");
			attr(button0, "data-action", "clear");
			attr(button1, "type", "button");
			attr(button1, "class", "button");
			attr(button1, "data-action", "undo");
			attr(div1, "class", "signature-pad--action-class");
			attr(button2, "type", "button");
			attr(button2, "class", "button save");
			attr(button2, "data-action", "save-png");
			attr(button3, "type", "button");
			attr(button3, "class", "button save");
			attr(button3, "data-action", "save-svg");
			attr(div2, "class", "signature-pad--action-class");
			attr(div3, "class", "signature-pad--actions");
			attr(div5, "class", "signature-pad");

			dispose = [
				listen(button0, "click", ctx.clearPad),
				listen(button1, "click", ctx.undo),
				listen(button2, "click", ctx.savePNG),
				listen(button3, "click", ctx.saveSVG)
			];
		},

		m(target, anchor) {
			insert(target, div5, anchor);
			append(div5, div0);
			append(div0, canvas_1);
			ctx.canvas_1_binding(canvas_1);
			ctx.div0_binding(div0);
			append(div5, t0);
			append(div5, div4);
			append(div4, div3);
			append(div3, div1);
			append(div1, button0);
			append(div1, t2);
			append(div1, button1);
			ctx.div1_binding(div1);
			append(div3, t4);
			append(div3, div2);
			append(div2, button2);
			append(div2, t6);
			append(div2, button3);
			ctx.div2_binding(div2);
			ctx.div3_binding(div3);
		},

		p: noop,
		i: noop,
		o: noop,

		d(detaching) {
			if (detaching) {
				detach(div5);
			}

			ctx.canvas_1_binding(null);
			ctx.div0_binding(null);
			ctx.div1_binding(null);
			ctx.div2_binding(null);
			ctx.div3_binding(null);
			run_all(dispose);
		}
	};
}

let minHeight = 120;

function downloadSignature(dataURL, filename) {
     if (navigator.userAgent.indexOf("Safari") > -1 && navigator.userAgent.indexOf("Chrome") === -1) {
         window.open(dataURL);
     } else {
         var blob = dataURLToBlob(dataURL);
         var url = window.URL.createObjectURL(blob);

         var a = document.createElement("a");
         a.style = "display: none";
         a.href = url;
         a.download = filename;

         document.body.appendChild(a);
         a.click();

         window.URL.revokeObjectURL(url);
     }
 }

function dataURLToBlob(dataURL) {
     // Code taken from https://github.com/ebidel/filer.js
     var parts = dataURL.split(';base64,');
     var contentType = parts[0].split(":")[1];
     var raw = window.atob(parts[1]);
     var rawLength = raw.length;
     var uInt8Array = new Uint8Array(rawLength);

     for (var i = 0; i < rawLength; ++i) {
         uInt8Array[i] = raw.charCodeAt(i);
     }

     return new Blob([uInt8Array], { type: contentType });
 }

function instance($$self, $$props, $$invalidate) {
	

    let canvas;
    let container;
    let buttonBar;
    let clearButtons;
    let saveButtons;
    let signaturePad;
    let width;
    let height;

    let { download = false, background = "#ffffff", pen = "#000000", minwidth = 0.5, maxwidth = 2.5, velocityfilterweight = 0.7, dotsize = ((maxwidth + minwidth) / 2), clearbuttons, savebuttons } = $$props;

	const dispatch = createEventDispatcher();
	onMount(() => {
        createPad();
	});

    function checkActionButtons() {
        let clear = ((clearbuttons !== undefined) && (clearbuttons !== "false") && (clearbuttons !== false));
        let save = ((savebuttons !== undefined) && (savebuttons !== "false") && (savebuttons !== false));
        return (clear || save) ? "flex" : "none";
    }

    function createPad() {
        var options = { dotSize: dotsize,
                        minWidth: minwidth,
                        maxWidth: maxwidth,
                        velocityFilterWeight: velocityfilterweight,
                        backgroundColor: background,
                        penColor: pen };
        resizeCanvas();
        signaturePad = new SignaturePad(canvas, options);
        clearPad();
    }

    function getData() {
        var data = signaturePad.getData();
        let payload = data;
        dispatch("pointData", payload);
    }

    function clearPad() {
        signaturePad.clear();
    }

    function undo() {
        var data = signaturePad.toData();

        if (data) {
            data.pop(); // remove the last dot or line
            signaturePad.fromData(data); 
        }
    }

    function resizeCanvas() {
        let parentHeight = container.parentNode.offsetHeight;
        if (parentHeight < minHeight) {
            $$invalidate('container', container.parentNode.style.height = minHeight + "px", container);
        }
        width = container.offsetWidth;
        height = container.offsetHeight;
        var ratio =  Math.max(window.devicePixelRatio || 1, 1);
        $$invalidate('canvas', canvas.style.width = width + 'px', canvas);
        $$invalidate('canvas', canvas.style.height = height + 'px', canvas);
        $$invalidate('canvas', canvas.width = width * ratio, canvas);
        $$invalidate('canvas', canvas.height = height * ratio, canvas);
        canvas.getContext("2d").scale(ratio, ratio);
   }

    function savePNG() {
        if (!signaturePad.isEmpty()) {
            var dataURL = signaturePad.toDataURL();
            if (download !== false) {
                downloadSignature(dataURL, "signature.png");
            }
            let payload = { "dataUri": dataURL, "width": width, "height": height };
            dispatch("signature", payload);
        }
    }

    function saveSVG() {
        if (!signaturePad.isEmpty()) {
            var dataURL = signaturePad.toDataURL('image/svg+xml');
            if (download !== false) {
                downloadSignature(dataURL, "signature.svg");
            }
            let payload = { "dataUri": dataURL, "width": width, "height": height };
            dispatch("signature", payload);
        }
    }

	function canvas_1_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			$$invalidate('canvas', canvas = $$value);
		});
	}

	function div0_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			$$invalidate('container', container = $$value);
		});
	}

	function div1_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			$$invalidate('clearButtons', clearButtons = $$value);
		});
	}

	function div2_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			$$invalidate('saveButtons', saveButtons = $$value);
		});
	}

	function div3_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			$$invalidate('buttonBar', buttonBar = $$value);
		});
	}

	$$self.$set = $$props => {
		if ('download' in $$props) $$invalidate('download', download = $$props.download);
		if ('background' in $$props) $$invalidate('background', background = $$props.background);
		if ('pen' in $$props) $$invalidate('pen', pen = $$props.pen);
		if ('minwidth' in $$props) $$invalidate('minwidth', minwidth = $$props.minwidth);
		if ('maxwidth' in $$props) $$invalidate('maxwidth', maxwidth = $$props.maxwidth);
		if ('velocityfilterweight' in $$props) $$invalidate('velocityfilterweight', velocityfilterweight = $$props.velocityfilterweight);
		if ('dotsize' in $$props) $$invalidate('dotsize', dotsize = $$props.dotsize);
		if ('clearbuttons' in $$props) $$invalidate('clearbuttons', clearbuttons = $$props.clearbuttons);
		if ('savebuttons' in $$props) $$invalidate('savebuttons', savebuttons = $$props.savebuttons);
	};

	$$self.$$.update = ($$dirty = { clearbuttons: 1, savebuttons: 1, minwidth: 1, maxwidth: 1, velocityfilterweight: 1, dotsize: 1 }) => {
		if ($$dirty.clearbuttons) { if (clearbuttons !== undefined) {
              let display = checkActionButtons();
              $$invalidate('buttonBar', buttonBar.style.display = display, buttonBar);
              $$invalidate('clearButtons', clearButtons.style.display = display, clearButtons);
      	} }
		if ($$dirty.savebuttons) { if (savebuttons !== undefined) {
              let display = checkActionButtons();
              $$invalidate('buttonBar', buttonBar.style.display = display, buttonBar);
              $$invalidate('saveButtons', saveButtons.style.display = display, saveButtons);
      	} }
		if ($$dirty.minwidth) { if (minwidth !== undefined) {
              $$invalidate('minwidth', minwidth = parseFloat(minwidth) || 0.5);
      	} }
		if ($$dirty.maxwidth) { if (maxwidth !== undefined) {
              $$invalidate('maxwidth', maxwidth = parseFloat(maxwidth) || 2.5);
      	} }
		if ($$dirty.velocityfilterweight) { if (velocityfilterweight !== undefined) {
              $$invalidate('velocityfilterweight', velocityfilterweight = parseFloat(velocityfilterweight) || 0.7);
      	} }
		if ($$dirty.dotsize || $$dirty.maxwidth || $$dirty.minwidth) { if (dotsize !== undefined) {
              $$invalidate('dotsize', dotsize = parseFloat(dotsize) || ((maxwidth + minwidth) / 2));
      	} }
	};

	return {
		canvas,
		container,
		buttonBar,
		clearButtons,
		saveButtons,
		download,
		background,
		pen,
		minwidth,
		maxwidth,
		velocityfilterweight,
		dotsize,
		clearbuttons,
		savebuttons,
		getData,
		clearPad,
		undo,
		savePNG,
		saveSVG,
		canvas_1_binding,
		div0_binding,
		div1_binding,
		div2_binding,
		div3_binding
	};
}

class SignaturePadComponent extends SvelteElement {
	constructor(options) {
		super();

		this.shadowRoot.innerHTML = `<style>.signature-pad{position:relative;display:flex;flex-direction:column;width:100%;height:100%;background-color:#ddd}.signature-pad--body{position:relative;flex:1}.signature-pad--body canvas{position:absolute;left:0;top:0;width:100%;height:100%}.signature-pad--actions{display:none;justify-content:space-between;padding:8px;border-top:1px solid #888}.signature-pad--action-class{display:none}</style>`;

		init(this, { target: this.shadowRoot }, instance, create_fragment, safe_not_equal, ["download", "background", "pen", "minwidth", "maxwidth", "velocityfilterweight", "dotsize", "clearbuttons", "savebuttons", "getData", "clearPad", "undo", "savePNG", "saveSVG"]);

		if (options) {
			if (options.target) {
				insert(options.target, this, options.anchor);
			}

			if (options.props) {
				this.$set(options.props);
				flush();
			}
		}
	}

	static get observedAttributes() {
		return ["download","background","pen","minwidth","maxwidth","velocityfilterweight","dotsize","clearbuttons","savebuttons","getData","clearPad","undo","savePNG","saveSVG"];
	}

	get download() {
		return this.$$.ctx.download;
	}

	set download(download) {
		this.$set({ download });
		flush();
	}

	get background() {
		return this.$$.ctx.background;
	}

	set background(background) {
		this.$set({ background });
		flush();
	}

	get pen() {
		return this.$$.ctx.pen;
	}

	set pen(pen) {
		this.$set({ pen });
		flush();
	}

	get minwidth() {
		return this.$$.ctx.minwidth;
	}

	set minwidth(minwidth) {
		this.$set({ minwidth });
		flush();
	}

	get maxwidth() {
		return this.$$.ctx.maxwidth;
	}

	set maxwidth(maxwidth) {
		this.$set({ maxwidth });
		flush();
	}

	get velocityfilterweight() {
		return this.$$.ctx.velocityfilterweight;
	}

	set velocityfilterweight(velocityfilterweight) {
		this.$set({ velocityfilterweight });
		flush();
	}

	get dotsize() {
		return this.$$.ctx.dotsize;
	}

	set dotsize(dotsize) {
		this.$set({ dotsize });
		flush();
	}

	get clearbuttons() {
		return this.$$.ctx.clearbuttons;
	}

	set clearbuttons(clearbuttons) {
		this.$set({ clearbuttons });
		flush();
	}

	get savebuttons() {
		return this.$$.ctx.savebuttons;
	}

	set savebuttons(savebuttons) {
		this.$set({ savebuttons });
		flush();
	}

	get getData() {
		return this.$$.ctx.getData;
	}

	get clearPad() {
		return this.$$.ctx.clearPad;
	}

	get undo() {
		return this.$$.ctx.undo;
	}

	get savePNG() {
		return this.$$.ctx.savePNG;
	}

	get saveSVG() {
		return this.$$.ctx.saveSVG;
	}
}

export default SignaturePadComponent;
window.customElements.define('signature-pad', SignaturePadComponent);
